# Brycen Martin, Jonathan Laughlin and Shane Snediker
# Dr. Jones CS473
# Genetic Algorithm Final Project
# Updated December 14, 2020

# Access Google's Spokane City Map API
import googlemaps 
from datetime import datetime
from googlemaps import Client
gmaps = Client(key='AIzaSyCFcf_BmN1Qm1q-a3yy07RXtPHMgOiyZ-w')

################### CLASSES AND FUNCTIONS ###################
# TODO: This function needs work

def PathGenerator(Sequence, Addresses, Location = [1,1,2]):
    #UNSURE HOW TO HANDLE LOCATION
    Path = []
    for Direction in Sequence:
        if(Direction == 'L'):
            Path.append(Addresses[0])
    return Path

# A class for representing the intersections of our mini city
# Constructor: takes 5 Boolean arguments (North, South, East, West, DoesExist). For N, S, E, & W
#              the Boolean value signifies if the bot is able to traverse in that direction from
#              this intersection.  DoesExist is a Boolean value that signfies whether or not the
#              street exists at this intersection.  This is necessary because there are certain
#              areas of our mini city where specific streets do not exist and we need a way of 
#              communicating that information to our bot.  
# _repr_ : Printing the details of the intersection
class intersection:
    def __init__(self, North, South, East, West, DoesExist):
        self.North = North
        self.South = South
        self.East = East
        self.West = West
        self.DoesExist = DoesExist

    def __repr__(self):
        return "North:% s South:% s East:% s West:% s DoesExist:% s" % (self.North, self.South, self.East, self.West, self.DoesExist)

################### LIST OF EAST STREETS ########################################################

# All North/South streets east of Division street
NorthE = ['N Division St', 'N Ruby St', 'N Mayfair St', 'N Lidgerwood St', 'N Astor St', 'N Addison St', 'N Wiscomb St', 'N Standard St', 'N Dakota St', 'N Cincinnati St', 'N Hamilton St', 'N Nevada St', 'N Columbus St', 'N Morton St', 'N Perry St', 'N Hogan St', 'N Helena St', 'N Madelia St', 'N Pittsburg St', 'N Magnolia St', 'N Napa St', 'N Martin St', 'N Crestline St']
# All East/West streets east of Division street
EastW = ['E Francis', 'E Decatur Ave', 'E Dalke Ave','E Bismark Ave', 'E Central Ave', 'E Columbia Ave', 'E Joseph Ave', 'E Nebraska Ave', 'E Rowan Ave', 'E North Ave', 'E Sanson Ave', 'E Everett Ave', 'E Crown Ave', 'E Queen Ave', 'E Olympic Ave', 'E Wabash Ave', 'E Broad Ave', 'E Wellesley Ave', 'E Hoffman Ave', 'E Princeton Ave', 'E Heroy Ave', 'E Longfellow Ave', 'E Rich Ave', 'E Rockwell Ave', 'E Lacrosse Ave', 'E Walton Ave', 'E Garland Ave', 'E Empire Ave', 'E Providence Ave', 'E Kiernan Ave', 'E Gordan Ave', 'E Glass Ave', 'E Courtland Ave', 'E Bridgeport Ave', 'Liberty Ave', 'E Dalton Ave', 'E Euclid Ave', 'E Fairview Ave', 'E Cleveland Ave', 'E North Foothills Dr', 'E Grace Ave', 'E Buckeye Ave', 'E Marietta Ave', 'E Jackson Ave', 'E Carlisle Ave', 'E Montgomery Ave', 'E Illinois Ave', 'E Ermina Ave', 'E Baldwin Ave', 'E Indiana Ave']

################## INTERSECTION INFO FOR EASTSIDE STREETS #######################################
#                  N Division St                            N Ruby St                               N Mayfair St                               N Lidgerwood St                             N Astor St                            N Addison St                           N Wiscomb St                            N Standard St                               N Dakota St                            N Cincinnati St                           N Hamilton St                             N Nevada St                            N Columbus St                                N Morton St                                 N Perry St                            N Hogan St                                      N Helena St                            N Pittsburg St                               N Magnolia St                              N Napa St                              N Martin St                          N Crestline St
East = [
[intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,False,True,True)],                                                                     # Francis
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                   # Decatur
[intersection(True,True,True,True,True), intersection(False, True, True, True, True), intersection(True, True,True,True,True), intersection(True, True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                                                # Dalke
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                   # Bismark      
[intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                                                  # Central  
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                         # Columbia
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                       # Joseph
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False,False,True,True,False), intersection(True,True,False,True,True)],                                                    # Nebraska
[intersection(True,False,True,False,True), intersection(False,False,False,False,False), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(False, True, True, True, False), intersection(True,True,False,True,True)],                                                # Rowan
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, False, True, True), intersection(True, True, True, False, True), intersection(True, True, False, True, True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False)],                                  # North       
[intersection(True,False,True,False,True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, False, True, True), intersection(True, True, True, False, True), intersection(True, True, False, True, True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False)],                                      # Sanson   
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                                  # Everett          
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(True,True,False,False,False), intersection(True, True, False, False, False), intersection(False,False,False,False,False)],                                                       # Crown   
[intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                             # Queen
[intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(True,True,False,False,False), intersection(True, True, False, False, False), intersection(False,False,False,False,False)],                                              # Olympic
[intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                     # Wabash        
[intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(True,True,False,False,False), intersection(True, True, False, False, False), intersection(False,False,False,False,False)],                                              # Broad
[intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True),  intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False),  intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True,True,False,True,True)],                                                          # Wellesley 
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                 # Hoffman 
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(False, False, False, False, False), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(True,True,False,False,False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                        # Princeton
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(False, True, True, False, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                     # Heroy 
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                      # Longfellow
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True,True,False,True,True)],                                                          # Rich
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, False, True, True), intersection(True, True, False, False, False), intersection(False,False,False,False,False)],                                                   # Rockwell
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True),  intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                             # Lacrosse 
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                               # Walton
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(False,True,False,True,True)],                                                           # Garland   
[intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                          # Empire
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(False,True,False,True,True)],                                                      # Providence
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,True,True,False), intersection(True, True, False, False, False), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                     # Kiernan
[intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,True,True,False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                        # Gordon
[intersection(True,True,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                            # Glass
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                           # Courtland
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                           # Bridgeport
[intersection(True,False,True,False,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                           # Liberty
[intersection(False,True,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True,True,False,True,True)],                                                       # Dalton
[intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True, True, True, True, True), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                                    # Euclid
[intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(True,True,True,False,True), intersection(True,True,False,True,True), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                                   # Fairview
[intersection(True,False,True,False,True), intersection(True,False,True,False,True), intersection(True,True,True,True,True), intersection(False,False,False,False,False), intersection(False,True,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(True, True, False, False, False), intersection(True, True, False, False, False), intersection(False,False,False,False,False)],                        # Cleveland
[intersection(False,True,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True,True,True),intersection(False,False,True, True,False), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True,True,False,True,True)],                                                            # North Foothills Dr   
[intersection(False,True,False,False,False), intersection(True,False,False,False,False), intersection(False,False,True,True,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],        # Grace
[intersection(False,True,False,False,False), intersection(True,False,False,False,False), intersection(False,False,True,True,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,True,True,False), intersection(True,True,False,True,True), intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(False,False,True,True,False), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True,True,False,True,True)],                                # Buckeye     
[intersection(False,True,False,False,False), intersection(True,False,False,False,False), intersection(False,False,True,True,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True,True,False,True,True)],                                           # Marietta 
[intersection(False,True,True,False,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(False,False,True, True,False), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                                        # Jackson
[intersection(False,True,True,True,True), intersection(True,False,False,True,True), intersection(False,False,False,False,False), intersection(False,False,False,False,False), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False, False, True, True, False), intersection(True, True, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                            # Carlisle
[intersection(False,True,True,False,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(False,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                     # Montgomery
[intersection(False,True,False,False,False), intersection(True,False,False,False,False), intersection(False,False,False,False,False),intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(True,True,False,False,False), intersection(False,False,False,False,False), intersection(True,True,False,False,False), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,False,True,True,True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True,False,False,True,True)],                                         # Illinois
[intersection(False,True,True,False,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                      # Ermina
[intersection(False,True,True,False,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,False,True,True), intersection(True,True,True,False,True), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(False,False,True,True,False), intersection(True,True,True,True,True), intersection(True,True,True,True,True), intersection(True,True,False,True,True), intersection(False,False,False,False,False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False),intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)],                                     # Baldwin
[intersection(False,True,True,True,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True, True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(True,False,True,True,True), intersection(False,False,True,True,False), intersection(False, False, True, True, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False,False,False,False,False)]],                                # Indiana


#################### LIST OF WEST STREETS #########################################################

# All North/South streets west of Division street
NorthW = ['N Monroe St', 'N Lincoln St', 'N Post St', 'N Wall St', 'N Howard St', 'N Stevens St', 'N Washington St', 'N Whitehouse St', 'N Calispel St', 'N Normandie St', 'N Atlantic St', 'N Division St']
# All East/West streets west of Division street
WestE = ['W Francis Ave', 'W Dalke Ave', 'W Central Ave', 'W Columbia Ave', 'W Joseph Ave', 'W Nebraska Ave', 'W Rowan Ave', 'W Everett Ave', 'W Queen Ave', 'W Wabash Ave', 'W Wellesley Ave', 'W Princeton Ave', 'W Heroy Ave', 'W Longfellow Ave', 'W Rockwell Ave', 'W Lacrosse Ave', 'W Walton Ave', 'W Garland Ave', 'W Providence Ave', 'W Kiernan Ave', 'W Gordon Ave', 'W Glass Ave', 'W Cora Ave', 'W Alice Ave', 'W Dalton Ave', 'W Euclid Ave', 'W Park Pl', 'W Waverly Pl', 'W Cleveland Ave', 'W Buckeye Ave', 'W Chelan Ave', 'W York Ave', 'W Jackson Ave', 'W Carlisle Ave', 'W Montgomery Ave', 'W Mansfield Ave', 'W Knox Ave', 'W Shannon Ave', 'W Indiana Ave']

################## INTERSECTION INFO FOR WESTSIDE STREETS #######################################   
#              Monroe                                           Lincoln                                     Post                                         Wall                                       Howard                                      Stevens                                         Washington                                  Whitehouse                                      Calispel                                Normandie                                       Atlantic                                    Division
West = [
    [intersection(False, True, True, False, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True)], 
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True)], 
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(True, True, False, True, True)], 
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(False, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],  
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True)], # Queen
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, False, True, True)], # Wabash
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True)], # Wellesley
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(True, True, True, False, True)],   # Princeton
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, False, True, True), intersection(False, False, False, False, False)],   # Heroy
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True)],  # Rockwell
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True)],   # Garland
    [intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],
    [intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True)],        
    [intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True)],  # Glass
    [intersection(True, True, True, False, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, True, False, True, True), intersection(False, False, False, False, False)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],  # Alice
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],  # Dalton
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True)],
    [intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False)],
    [intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(False, True, True, True, True), intersection(False, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(False, False, True, True, False), intersection(False, False, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)], # Waverly
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(False, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],
    [intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, True, True, True)],  # Buckeye
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, False, True, True), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False), intersection(False, False, False, False, False)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],  # York
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, False, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)], # Mansfield
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(False, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)], # Knox
    [intersection(True, True, True, False, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, False, True, True, False), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(True, True, True, True, True), intersection(False, True, False, True, True)],  # Shannon
    [intersection(True, False, True, False, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(False, False, True, True, False), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True), intersection(True, False, True, True, True)]] # Indiana

"""
# Geocoding an address
geocode_result = gmaps.geocode('1600 Amphitheatre Parkway, Mountain View, CA')

# Look up an address with reverse geocoding
reverse_geocode_result = gmaps.reverse_geocode((40.714224, -73.961452))
directions = gmaps.distance_matrix('N Ruby St E Ermina Ave, Spokane, WA', 'N Ruby St E Baldwin, Spokane, WA') #directions('N Ruby St E Ermina Ave, Spokane, WA', 'N Ruby St E Baldwin, Spokane, WA')
print(directions)  

print("done")
directions = directions[0]
i=1
for leg in directions['legs']:
    startAddress = leg['start_address']
    print("Start Address:", startAddress)
    endAddress = leg['end_address']
    distance = leg['distance']['text']
    print("End Address:", endAddress)
    print("Distance:", distance)
    for step in leg['steps']:
        html_instructions = step['html_instructions']
        html_instructions = html_instructions.split('<b>')
        html_instructions2 = ''
        for each in html_instructions:
            if(each != '<b>'):
                html_instructions2 += each
        html_instructions2 = html_instructions2.split('</b>')
        html_instructions3 = ''
        for each in html_instructions2:
            if(each != '<b\>'):
                html_instructions3 += each
        print("STEP {} {}".format(i ,html_instructions3))
        i = i+1
"""


# Maze class
class Maze:
    
    # Special grid locations
    MAZE_EXIT = [70, 20]
    MAZE_START = [2, 20]

    # Default orientation is for agents to spawn in facing 0 (Right)
    MAZE_START_ORIENTATION = 0

    # This sets the WIDTH and HEIGHT of each grid square
    CELL_SIZE = 10

    # Set the HEIGHT and WIDTH of the pop up screen
    MAZE_SIZE = [700, 410]
    
    # HERE WE CREATE A 2 DIMENSIONAL ARRAY TO HOLD THE OBSTACLE LOCATIONS OF THE MAZE
    # THIS WILL BE A LARGE AREA OF LISTS WITH 1's REPRESENTING OBSTACLES AND 0's REPRESENTING FREE CELLS
    # OUR MAZE WILL BE 700 UNITS IN THE X-DIRECTION AND 410 UNITS IN THE Y-DIRECTION
    # WHILE THE FOLLOWING DEFINITION REPRESENTS THE FILLING OF EVERY CELL IN THE 700x410 MAZE,
    # WE SCALE THE GRID SO THAT EVERY GRID CELL LOCATION WILL BE A 10X10 PIXEL BLOCK

    MAZE_GRID = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]   